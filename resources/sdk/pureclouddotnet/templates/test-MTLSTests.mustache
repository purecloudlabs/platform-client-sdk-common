using Newtonsoft.Json;
using NUnit.Framework;
using NUnit.Framework.Interfaces;
using PureCloudPlatform.Client.V2.Api;
using PureCloudPlatform.Client.V2.Client;
using PureCloudPlatform.Client.V2.Extensions;
using PureCloudPlatform.Client.V2.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using System.IO;

namespace PureCloudPlatform.Client.V2.Tests
{
    ///<Summary>
    /// Tests for Sdk with MTLS configured
    ///</Summary>
    [Timeout(70 * 1000)]
    public class MTLSTests
    {
        private bool stop;

        string clientId = Environment.GetEnvironmentVariable("PURECLOUD_CLIENT_ID");
        string clientSecret = Environment.GetEnvironmentVariable("PURECLOUD_CLIENT_SECRET");
        string environment = Environment.GetEnvironmentVariable("PURECLOUD_ENVIRONMENT");

        UsersApi usersApi = new UsersApi();

        string userId;
        string userEmail;
        string userName = ".NET SDK MTLS Tester";
        string userDepartment = "Ministry of MTLS Testing";

        ///<Summary>
        /// MTLSTests default constructor
        ///</Summary>
        public MTLSTests()
        {
        }

        ///<Summary>
        /// TraceBasicInformation
        ///</Summary>
        [Test, Order(0)]
        public void TraceBasicInformation()
        {
            Console.WriteLine($"PURECLOUD_ENVIRONMENT={environment}");
            Assert.IsNotEmpty(environment);
            Assert.IsNotNull(environment);

            Console.WriteLine($"PURECLOUD_CLIENT_ID={clientId}");
            Assert.IsNotEmpty(clientId);
            Assert.IsNotNull(clientId);

            Assert.IsNotEmpty(clientSecret);
            Assert.IsNotNull(clientSecret);

            userEmail = $"{Guid.NewGuid()}@{environment}";
            Console.WriteLine($"userEmail={userEmail}");
        }

        ///<Summary>
        /// Configure MTLS and Gateway
        ///</Summary>
        [Test, Order(1)]
        public void ConfigureMTLSAndGateway()
        {
            // Configure MTLS certificates
            var certPath = "../../../resources/sdk/pureclouddotnet/scripts/mtls-test/mono-test-cert.pfx";
            var certPass = "goodPassword123";
            PureCloudPlatform.Client.V2.Client.Configuration.Default.ApiClient.SetMTLSCertificates(certPath, certPass);

            // Verify certificate was loaded
            var certCollection = PureCloudPlatform.Client.V2.Client.Configuration.Default.ApiClient.ClientOptions.LocalClientCertificates;
            Assert.IsNotNull(certCollection, "Certificate collection should not be null");

            // Setup Gateway
            PureCloudPlatform.Client.V2.Client.Configuration.Default.ApiClient.SetGateway(
                host: "localhost",
                protocol: "https",
                port: 4027,
                pathParamsLogin: null,
                pathParamsApi: null
            );
        }

        ///<Summary>
        /// Authenticate
        ///</Summary>
        [Test, Order(2)]
        public void Authenticate()
        {
            PureCloudRegionHosts? region = getRegion(environment);
            if (region == null)
            { //Returned in the case of default value
                PureCloudPlatform.Client.V2.Client.Configuration.Default.ApiClient.setBasePath("https://api." + environment);
            }
            else
            {
                PureCloudRegionHosts regionval = region.GetValueOrDefault();
                PureCloudPlatform.Client.V2.Client.Configuration.Default.ApiClient.setBasePath(regionval);
            }

            PureCloudPlatform.Client.V2.Client.Configuration.Default.ApiClient.PostToken(clientId, clientSecret);

            Assert.IsNotEmpty(PureCloudPlatform.Client.V2.Client.Configuration.Default.AccessToken);
        }

        ///<Summary>
        /// CreateUser
        ///</Summary>
        [Test, Order(3)]
        public void CreateUser()
        {
            var newUser = new CreateUser()
            {
                Name = userName,
                Email = userEmail,
                Password = Guid.NewGuid() + "!@#$1234asdfASDF"
            };

            ApiResponse<User> user = usersApi.PostUsersWithHttpInfo(newUser);

            userId = user.Data.Id;
            Assert.AreEqual(user.Data.Name, userName);
            Assert.AreEqual(user.Data.Email, userEmail);

            Console.WriteLine($"CorrelationId for PostUsersWithHttpInfo {user.CorrelationId}");
            Console.WriteLine($"Version for PostUsersWithHttpInfo {user.Data.Version}");
            Console.WriteLine($"Created user with ID {userId}");
        }

        ///<Summary>
        /// UpdateUser
        ///</Summary>
        [Test, Order(4)]
        public void UpdateUser()
        {
            var updateUser = new UpdateUser()
            {
                Department = userDepartment,
                Version = 1
            };

            var user = usersApi.PatchUser(userId, updateUser);

            Assert.AreEqual(user.Id, userId);
            Assert.AreEqual(user.Name, userName);
            Assert.AreEqual(user.Email, userEmail);
            Assert.AreEqual(user.Department, userDepartment);
        }

        ///<Summary>
        /// GetUser
        ///</Summary>
        [Test, Retry(2), Order(4)]
        public void GetUser()
        {
            Thread.Sleep(6000);
            var user = usersApi.GetUserWithHttpInfo(userId, new List<string>() { "profileSkills" }, null, null);
            Assert.AreEqual(user.Data.Id, userId);
            Assert.AreEqual(user.Data.Name, userName);
            Assert.AreEqual(user.Data.Email, userEmail);
            Assert.AreEqual(user.Data.Department, userDepartment);

            Console.WriteLine($"CorrelationId for GetUserWithHttpInfo {user.CorrelationId}");
            Console.WriteLine($"Version for GetUserWithHttpInfo {user.Data.Version}");
        }

        ///<Summary>
        /// DeleteUser
        ///</Summary>
        [Test, Order(5)]
        public void DeleteUser()
        {
            usersApi.DeleteUser(userId);
            Console.WriteLine($"Deleted user with ID {userId}");
        }

        [Test, Order(6)]
        public void CleanUp()
        {
            PureCloudPlatform.Client.V2.Client.Configuration.Default.ApiClient.ClientOptions.LocalClientCertificates.Clear();
            PureCloudPlatform.Client.V2.Client.Configuration.Default.ApiClient.ClientOptions.LocalClientCertificates = null;

            PureCloudPlatform.Client.V2.Client.Configuration.Default.ApiClient.SetGateway(
                host: null,
                protocol: "https",
                port: -1,
                pathParamsLogin: null,
                pathParamsApi: null
            );
        }

        ///<Summary>
        /// SetUp
        ///</Summary>
        [SetUp]
        public void SetUp()
        {
            if (stop)
            {
                Assert.Inconclusive("Previous test failed");
            }
        }

        ///<Summary>
        /// TearDown
        ///</Summary>
        [TearDown]
        public void TearDown()
        {
            if (TestContext.CurrentContext.Result.Outcome.Status == TestStatus.Failed)
            {
                stop = true;
            }
        }

        ///<Summary>
        /// getRegion
        ///</Summary>
        public Nullable<PureCloudRegionHosts> getRegion(String str = "http://api.mypurecloud.com")
        {
            switch (str)
            {
                case "mypurecloud.com":
                    return PureCloudRegionHosts.us_east_1;
                case "mypurecloud.ie":
                    return PureCloudRegionHosts.eu_west_1;
                case "mypurecloud.de":
                    return PureCloudRegionHosts.eu_central_1;
                case "mypurecloud.jp":
                    return PureCloudRegionHosts.ap_northeast_1;
                case "mypurecloud.com.au":
                    return PureCloudRegionHosts.ap_southeast_2;
                case "usw2.pure.cloud":
                    return PureCloudRegionHosts.us_west_2;
                case "cac1.pure.cloud":
                    return PureCloudRegionHosts.ca_central_1;
                case "apne2.pure.cloud":
                    return PureCloudRegionHosts.ap_northeast_2;
                case "euw2.pure.cloud":
                    return PureCloudRegionHosts.eu_west_2;
                case "aps1.pure.cloud":
                    return PureCloudRegionHosts.ap_south_1;
                case "use2.us-gov-pure.cloud":
                    return PureCloudRegionHosts.us_east_2;
                default:
                    Console.WriteLine("Value does not exist in enum using default val");
                    return null;
            }
        }
    }
}

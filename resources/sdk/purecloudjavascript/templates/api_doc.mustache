---
title: {{classname}}
---
# {{moduleName}}.{{classname}}{{#description}}
{{{description}}}{{/description}}

All URIs are relative to *{{basePath}}*

| Method | HTTP request | Description |
| ------------- | ------------- | ------------- |
{{#operations}}{{#operation}}[**{{operationId}}**]({{classname}}.html#{{operationId}}) | **{{httpMethod}}** {{path}} | {{#summary}}{{{summary}}}{{/summary}}
{{/operation}}{{/operations}}{: class="table table-striped"}

{{#operations}}
{{#operation}}
<a name="{{operationId}}"></a>

# {{#returnType}}{{#returnTypeIsPrimitive}}**{{returnType}}**{{/returnTypeIsPrimitive}}{{^returnTypeIsPrimitive}}{{returnType}}{{/returnTypeIsPrimitive}}{{/returnType}}{{^returnType}}void{{/returnType}} {{operationId}}({{#allParams}}{{#required}}{{{paramName}}}{{#vendorExtensions.x-codegen-hasMoreRequired}}, {{/vendorExtensions.x-codegen-hasMoreRequired}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{{#vendorExtensions.x-codegen-hasRequiredParams}}, {{/vendorExtensions.x-codegen-hasRequiredParams}}opts{{/hasOptionalParams}})

{{#isDeprecated}}
<span style="background-color: #f0ad4e;display: inline-block;padding: 7px;font-weight: bold;line-height: 1;color: #ffffff;text-align: center;white-space: nowrap;vertical-align: baseline;border-radius: .25em;margin: 10px 0;">DEPRECATED</span>
{{/isDeprecated}}

{{httpMethod}} {{path}}

{{{summary}}}{{#notes}}

{{{notes}}}{{/notes}}{{#vendorExtensions.x-genesys-preview}}

{{operationId}} is a preview method and is subject to both breaking and non-breaking changes at any time without notice{{/vendorExtensions.x-genesys-preview}}

{{#vendorExtensions.x-inin-requires-permissions}}
Requires {{type}} permissions:

{{#permissions}}
* {{.}}
{{/permissions}}
{{/vendorExtensions.x-inin-requires-permissions}}
{{^vendorExtensions.x-inin-requires-permissions}}
Requires NO permissions:
{{/vendorExtensions.x-inin-requires-permissions}}

### Example Usage

```{"language":"javascript"}
// Browser
const {{{moduleName}}} = require('{{{moduleName}}}');
// Node
const {{{moduleName}}} = require('{{{projectName}}}');
{{#hasAuthMethods}}
{{#authMethods}}{{#isBasic}}
// Configure HTTP basic authorization: {{{name}}}
let {{{name}}} = {{{moduleName}}}.ApiClient.instance.authentications['{{{name}}}'];
{{{name}}}.username = 'YOUR USERNAME';
{{{name}}}.password = 'YOUR PASSWORD';{{/isBasic}}{{#isApiKey}}
// Configure API key authorization: {{{name}}}
let {{{name}}} = {{{moduleName}}}.ApiClient.instance.authentications['{{{name}}}'];
{{{name}}}.apiKey = 'YOUR API KEY';
// Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to void)
//{{{name}}}.apiKeyPrefix = 'Token';{{/isApiKey}}{{#isOAuth}}
// Manually set auth token or use loginImplicitGrant(...) or loginClientCredentialsGrant(...)
{{{moduleName}}}.ApiClient.instance.setAccessToken(yourAccessToken);{{/isOAuth}}
{{/authMethods}}
{{/hasAuthMethods}}

let apiInstance = new {{{moduleName}}}.{{{classname}}}();{{#hasParams}}
{{#vendorExtensions.x-codegen-hasRequiredParams}}{{#allParams}}{{#required}}
let {{{paramName}}} = {{{example}}}; // {{{dataType}}} | {{{description}}}{{/required}}{{/allParams}}{{/vendorExtensions.x-codegen-hasRequiredParams}}{{#hasOptionalParams}}
let opts = { {{#allParams}}{{^required}}
  '{{{paramName}}}': {{{example}}}{{#vendorExtensions.x-codegen-hasMoreOptional}},{{/vendorExtensions.x-codegen-hasMoreOptional}} // {{{dataType}}} | {{{description}}}{{/required}}{{/allParams}}
};{{/hasOptionalParams}}{{/hasParams}}

{{#usePromises}}
apiInstance.{{{operationId}}}({{#allParams}}{{#required}}{{{paramName}}}{{#vendorExtensions.x-codegen-hasMoreRequired}}, {{/vendorExtensions.x-codegen-hasMoreRequired}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{{#vendorExtensions.x-codegen-hasRequiredParams}}, {{/vendorExtensions.x-codegen-hasRequiredParams}}opts{{/hasOptionalParams}})
  .then(({{#returnType}}data{{/returnType}}) => {
    {{#returnType}}console.log(`{{{operationId}}} success! data: ${JSON.stringify(data, null, 2)}`);{{/returnType}}{{^returnType}}console.log('{{{operationId}}} returned successfully.');{{/returnType}}
  })
  .catch((err) => {
    console.log('There was a failure calling {{{operationId}}}');
    console.error(err);
  });{{/usePromises}}{{^usePromises}}
let callback = (error, data, response) => {
  if (error) {
    console.error(error);
  } else {
    {{#returnType}}console.log('API called successfully. Returned data: ' + data);{{/returnType}}{{^returnType}}console.log('API called successfully.');{{/returnType}}
  }
};
apiInstance.{{{operationId}}}({{#allParams}}{{#required}}{{{paramName}}}{{#vendorExtensions.x-codegen-hasMoreRequired}}, {{/vendorExtensions.x-codegen-hasMoreRequired}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{{#vendorExtensions.x-codegen-hasRequiredParams}}, {{/vendorExtensions.x-codegen-hasRequiredParams}}opts{{/hasOptionalParams}}{{#hasParams}}, {{/hasParams}}callback);{{/usePromises}}
```

### Parameters

{{^allParams}}This endpoint does not need any parameter.{{/allParams}}{{#allParams}}{{#-last}}
| Name | Type | Description  | Notes |
| ------------- | ------------- | ------------- | ------------- |{{/-last}}{{/allParams}}
{{#allParams}} **{{paramName}}** | **{{dataType}}** | {{{description}}} | {{^required}}[optional] {{/required}}{{#defaultValue}}[default to {{{defaultValue}}}]{{/defaultValue}}{{#allowableValues}}<br />**Values**: {{#values}}{{.}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}} |
{{#-last}}{: class="table table-striped"}{{/-last}}{{/allParams}}

### Return type

{{#returnType}}**{{returnType}}**{{/returnType}}{{^returnType}}void (no response body){{/returnType}}

{{/operation}}
{{/operations}}

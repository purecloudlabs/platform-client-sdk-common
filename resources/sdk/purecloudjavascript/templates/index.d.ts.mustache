import {{moduleName}} = require('{{projectName}}');

declare module '{{projectName}}' {
	export const ApiClient: ApiClientClass;
	export const PureCloudRegionHosts: Record<string, string>;
}

declare class ApiClientClass {
	instance: ApiClientClass;
	config: Configuration;
    private proxyAgent: any;
    httpClient: AbstractHttpClient;

	callApi(path: string, httpMethod: string, pathParams: { [key: string]: string; }, queryParams: { [key: string]: object; }, headerParams: { [key: string]: object; }, formParams: { [key: string]: object; }, bodyParam: any, authNames: Array<string>, contentTypes: Array<string>, accepts: Array<string>): Promise<any>;
	loginClientCredentialsGrant(clientId: string, clientSecret: string): Promise<AuthData>;
	loginImplicitGrant(clientId: string, redirectUri: string, opts?: LoginImplicitGrantOptions): Promise<AuthData>;
	loginCodeAuthorizationGrant(clientId: string, clientSecret: string, authCode: string, redirectUri: string): Promise<AuthData>;
	refreshCodeAuthorizationGrant(clientId: string, clientSecret: string, refreshToken: string): Promise<AuthData>;
	loginPKCEGrant(clientId: string, redirectUri: string, opts?: LoginPKCEGrantOptions, codeVerifier?: string): Promise<AuthData>;
	generatePKCECodeVerifier(nChar: number): string;
	computePKCECodeChallenge(code: string): Promise<string>;
	authorizePKCEGrant(clientId: string, codeVerifier: string, authCode: string, redirectUri: string): Promise<AuthData>;
	logout(logoutRedirectUri: string): void;
	setAccessToken(token: string): void;
	setEnvironment(environment: string): void;
	setGateway(gateway: GatewayConfiguration): void;
	setPersistSettings(doPersist: boolean, prefix?: string): void;
	setReturnExtendedResponses(returnExtended: boolean): void;
	setStorageKey(storageKey: string): void;
	setProxyAgent(agent: any): void;

	setHttpClient(httpClient: AbstractHttpClient): void;
	getHttpClient(): AbstractHttpClient;
	setMTLSCertificates(certPath: string, keyPath:string, caPath:string): void;
	setMTLSContents(certContent: string, keyContent: string, caContent: string): void;
}

declare class LoginImplicitGrantOptions {
	state?: string;
}

declare class LoginPKCEGrantOptions {
	state?: string;
	org?: string;
	provider?: string;
}

declare class AuthData {
	accessToken: string;
	state?: string;
	tokenExpiryTime: number;
	tokenExpiryTimeString: string;
}

declare class ProxyConfig {
	host: string;
	port: number;
	protocol: string;
}

declare interface GatewayConfiguration {
	host: string;
	protocol?: string;
	port?: number;
	path_params_login?: string;
	path_params_api?: string;
	username?: string;
	password?: string;
}

declare class Configuration {
	instance: Configuration;
	configPath: string;
	refresh_access_token: boolean;
	refresh_token_wait_max: number;
	live_reload_config: boolean;
	host: string;
	environment: string;
	basePath: string;
	authUrl: string;
	logger: Logger;
	config: any;
	gateway?: GatewayConfiguration;
	setEnvironment(environment: string): void;
	setGateway(gateway: GatewayConfiguration): void;
	getConfUrl(pathType: string, regionUrl: string): string;
}

declare class HttpRequestOptions {
	url: string;
	method: string;
	headers?:Record<string, any>;
	params?:Record<string, any>;
	data?: any;
	timeout: number;

	constructor(url: string, method: string, headers: Record<string, any>, params: Record<string, any>, data: any, timeout?: number);
	setUrl(url: string): void;
	setMethod(method: string): void;
	setData(data: any): void;
	setParams(params: Record<string, any>): void;
	setHeaders(headers: Record<string, any>): void;
	setTimeout(timeout: number): void;
}

declare abstract class AbstractHttpClient {
    httpsAgent: any;
	timeout: number;

	constructor();
	setTimeout(timeout: number): void;
	setHttpsAgent(httpsAgent: any): void;
	abstract request(httpRequestOptions: HttpRequestOptions): Promise<any>;
    setPreHook(hookFunction: (config: any) =>  Promise<any>): void;
    setPostHook(hookFunction: (response: any) => Promise<any>): void;
    abstract enableHooks(): void;
}

declare class DefaultHttpClient {
    httpsAgent: any;
	timeout: number;
    _axiosInstance: any;

    constructor(timeout?: number, httpsAgent?: any);
	setTimeout(timeout: number): void;
	setHttpsAgent(httpsAgent: any): void;
	setPreHook(hookFunction: (config: any) =>   Promise<any>): void;
    setPostHook(hookFunction: (response: any) => Promise<any>): void;
	request(httpRequestOptions: HttpRequestOptions): Promise<any>;
    toAxiosConfig(httpRequestOptions: HttpRequestOptions): any;
    enableHooks(): void;
}

declare class Logger {
	log_level: string;
	log_format: string;
	log_file_path: string;
	log_to_console: boolean;
	log_response_body: boolean;
	log_request_body: boolean;
	logLevels: any;
	logLevelEnum: any;
	logFormatEnum: any;
	setLogger(): void;
}
{{#apiInfo}}
{{#apis}}{{#operations}}
declare class {{classname}} {
	constructor(apiClient?: ApiClientClass);{{#operation}}{{!-- class: CodegenOperation --}}
  	{{operationId}}({{#allParams}}{{#required}}{{{paramName}}}: {{{typeScriptType}}}{{#vendorExtensions.x-codegen-hasMoreRequired}}, {{/vendorExtensions.x-codegen-hasMoreRequired}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{{#vendorExtensions.x-codegen-hasRequiredParams}}, {{/vendorExtensions.x-codegen-hasRequiredParams}}opts?: {{classname}}.{{operationId}}Options{{/hasOptionalParams}}): Promise<{{{typeScriptResponseType}}}>;{{/operation}}
}

declare namespace {{classname}} { {{#operation}}{{#hasOptionalParams}}
	export interface {{operationId}}Options { {{#allParams}}{{^required}}
		"{{{paramName}}}"?: {{{typeScriptType}}};{{/required}}{{/allParams}}
	}{{/hasOptionalParams}}{{/operation}}
}
{{/operations}}
{{/apis}}

declare namespace Models { {{#models}}{{#model}}
	export interface {{classname}} { {{#vars}}
		"{{baseName}}"{{^required}}?{{/required}}: {{{typeScriptType}}};{{/vars}}
	}
	{{/model}}{{/models}}
}
{{/apiInfo}}
